using NoobSwarm.Makros;

namespace NoobSwarm.GenericKeyboard.Linux
{
    public static class X11KeyMapping
    {
        private static readonly BiDictionary<Key, XK> Dict = new ()
        {
            {Key.CANCEL, XK.Cancel},
            {Key.TAB, XK.Tab},
            {Key.CLEAR, XK.Clear},
            {Key.RETURN, XK.Return},
            // {Key.MENU, XK.Menu},
            {Key.PAUSE, XK.Pause},
            {Key.KANA, XK.Hangul},
            {Key.HANJA, XK.Kanji},
            {Key.ESCAPE, XK.Escape},
            {Key.SPACE, XK.space},
            {Key.PRIOR, XK.Prior /* Page_Up */},
            {Key.NEXT, XK.Page_Down /* Next */},
            {Key.END, XK.End},
            {Key.HOME, XK.Home},
            {Key.LEFT, XK.Left},
            {Key.UP, XK.Up},
            {Key.RIGHT, XK.Right},
            {Key.DOWN, XK.Down},
            {Key.SELECT, XK.Select},
            // {Key.PRINT, XK.Print},
            {Key.EXECUTE, XK.Execute},
            {Key.INSERT, XK.Insert},
            {Key.DELETE, XK.Delete},
            {Key.HELP, XK.Help},
            {Key.KEY_0, XK.KEY_0},
            {Key.KEY_1, XK.KEY_1},
            {Key.KEY_2, XK.KEY_2},
            {Key.KEY_3, XK.KEY_3},
            {Key.KEY_4, XK.KEY_4},
            {Key.KEY_5, XK.KEY_5},
            {Key.KEY_6, XK.KEY_6},
            {Key.KEY_7, XK.KEY_7},
            {Key.KEY_8, XK.KEY_8},
            {Key.KEY_9, XK.KEY_9},
            {Key.A, XK.a},
            {Key.B, XK.b},
            {Key.C, XK.c},
            {Key.D, XK.d},
            {Key.E, XK.e},
            {Key.F, XK.f},
            {Key.G, XK.g},
            {Key.H, XK.h},
            {Key.I, XK.i},
            {Key.J, XK.j},
            {Key.K, XK.k},
            {Key.L, XK.l},
            {Key.M, XK.m},
            {Key.N, XK.n},
            {Key.O, XK.o},
            {Key.P, XK.p},
            {Key.Q, XK.q},
            {Key.R, XK.r},
            {Key.S, XK.s},
            {Key.T, XK.t},
            {Key.U, XK.u},
            {Key.V, XK.v},
            {Key.W, XK.w},
            {Key.X, XK.x},
            {Key.Y, XK.y},
            {Key.Z, XK.z},
            {Key.MULTIPLY, XK.multiply},
            {Key.F1, XK.F1},
            {Key.F2, XK.F2},
            {Key.F3, XK.F3},
            {Key.F4, XK.F4},
            {Key.F5, XK.F5},
            {Key.F6, XK.F6},
            {Key.F7, XK.F7},
            {Key.F8, XK.F8},
            {Key.F9, XK.F9},
            {Key.F10, XK.F10},
            {Key.F11, XK.F11 /* L1 */},
            {Key.F12, XK.L2 /* F12 */},
            {Key.F13, XK.L3 /* F13 */},
            {Key.F14, XK.F14 /* L4 */},
            {Key.F15, XK.F15 /* L5 */},
            {Key.F16, XK.F16 /* L6 */},
            {Key.F17, XK.L7 /* F17 */},
            {Key.F18, XK.F18 /* L8 */},
            {Key.F19, XK.F19 /* L9 */},
            {Key.F20, XK.L10 /* F20 */},
            {Key.F21, XK.R1 /* F21 */},
            {Key.F22, XK.F22 /* R2 */},
            {Key.F23, XK.R3 /* F23 */},
            {Key.F24, XK.F24 /* R4 */},
            {Key.NO_KEY, XK.VoidSymbol},
            {Key.LBUTTON, XK.Pointer_Button1},
            {Key.RBUTTON, XK.Pointer_Button3},
            {Key.MBUTTON, XK.Pointer_Button2},
            {Key.XBUTTON1, XK.Pointer_Button5},
            {Key.XBUTTON2, XK.Pointer_Button4},
            {Key.BACK, XK.BackSpace},
            // {Key.SHIFT, XK.Shift_L},
            // {Key.CONTROL, XK.Control_L},
            {Key.CAPITAL, XK.Caps_Lock},
            {Key.NUMPAD0, XK.KP_0},
            {Key.NUMPAD1, XK.KP_1},
            {Key.NUMPAD2, XK.KP_2},
            {Key.NUMPAD3, XK.KP_3},
            {Key.NUMPAD4, XK.KP_4},
            {Key.NUMPAD5, XK.KP_5},
            {Key.NUMPAD6, XK.KP_6},
            {Key.NUMPAD7, XK.KP_7},
            {Key.NUMPAD8, XK.KP_8},
            {Key.NUMPAD9, XK.KP_9},
            {Key.ADD, XK.KP_Add},
            {Key.SCROLL, XK.Scroll_Lock},
            {Key.SEPARATOR, XK.KP_Separator},
            {Key.SUBTRACT, XK.KP_Subtract},
            {Key.DECIMAL, XK.KP_Decimal},
            {Key.DIVIDE, XK.KP_Divide},
            {Key.NUMLOCK, XK.Num_Lock},
            {Key.LSHIFT, XK.Shift_L},
            {Key.RSHIFT, XK.Shift_R},
            {Key.LCONTROL, XK.Control_L},
            {Key.RCONTROL, XK.Control_R},
            {Key.SNAPSHOT, XK.Print},
            {Key.LWIN, XK.Super_L},
            {Key.RWIN, XK.Super_R},
            {Key.ATTN, XK.Terminal_3270_Attn},
            {Key.CRSEL, XK.Terminal_3270_CursorSelect},
            {Key.EXSEL, XK.Terminal_3270_ExSelect},
            {Key.EREOF, XK.Terminal_3270_EraseEOF},
            {Key.PLAY, XK.Terminal_3270_Play},
            {Key.APPS, XK.Menu},
/* ######################## */

            // {Key.LMENU, XK.Menu},
            // {Key.RMENU, XK.Menu},
            // {Key.JUNJA, XK.Kanji},
            // {Key.FINAL, XK.Find},
            // {Key.CONVERT, XK.Insert},
            // {Key.NONCONVERT, XK.Aogonek},
            // {Key.ACCEPT, XK.cent},
            // {Key.MODECHANGE, XK.Mode_switch},
            // {Key.SLEEP, XK.slash},
            // {
            //     /* OEM_FJ_JISHO */ Key.OEM_NEC_EQUAL, XK.lessthanequal
            // },
            // {Key.OEM_FJ_MASSHOU, XK.emdash},
            // {Key.OEM_FJ_TOUROKU, XK.Touroku},
            // {Key.OEM_FJ_LOYA, XK.semicolon},
            // {Key.OEM_FJ_ROYA, XK.Emacron},
            // {Key.BROWSER_BACK, XK.brokenbar},
            // {Key.BROWSER_FORWARD, XK.brokenbar},
            // {Key.BROWSER_REFRESH, XK.hebrew_resh},
            // {Key.BROWSER_STOP, XK.braceleft},
            // {Key.BROWSER_SEARCH, XK.brokenbar},
            // {Key.BROWSER_FAVORITES, XK.lowleftcorner},
            // {Key.BROWSER_HOME, XK.downshoe},
            // {Key.VOLUME_MUTE, XK.doubleacute},
            // {Key.VOLUME_DOWN, XK.Pointer_Down},
            // {Key.VOLUME_UP, XK.Pointer_Up},
            // {Key.MEDIA_NEXT_TRACK, XK.ISO_Next_Group},
            // {Key.MEDIA_PREV_TRACK, XK.ISO_Prev_Group},
            // {Key.MEDIA_STOP, XK.division},
            // {Key.MEDIA_PLAY_PAUSE, XK.Thai_saraue},
            // {Key.LAUNCH_MAIL, XK.kana_MA},
            // {
            //     /* kana_middledot */ Key.LAUNCH_MEDIA_SELECT, XK.kana_conjunctive /* kana_middledot */
            // },
            // {Key.LAUNCH_APP1, XK.kana_a},
            // {Key.LAUNCH_APP2, XK.kana_a},
            // {Key.OEM_PLUS, XK.plus},
            // {Key.OEM_COMMA, XK.comma},
            // {Key.OEM_MINUS, XK.minus},
            // {Key.OEM_PERIOD, XK.period},
            // {Key.OEM_1, XK.KEY_1},
            // {Key.OEM_2, XK.KEY_2},
            // {Key.OEM_3, XK.KEY_3},
            // {Key.OEM_4, XK.KEY_4},
            // {Key.OEM_5, XK.KEY_5},
            // {Key.OEM_6, XK.KEY_6},
            // {Key.OEM_7, XK.KEY_7},
            // {Key.OEM_8, XK.KEY_8},
            // {Key.OEM_AX, XK.comma},
            // {Key.OEM_102, XK.KEY_0},
            // {Key.ICO_HELP, XK.Help},
            // {Key.ICO_00, XK.comma},
            // {Key.PROCESSKEY, XK.percent},
            // {Key.ICO_CLEAR, XK.Clear},
            // {Key.PACKET, XK.space},
            // {Key.OEM_RESET, XK.Terminal_3270_Reset}, // ??
            // {Key.OEM_JUMP, XK.Terminal_3270_Jump}, //??
            // {Key.PA1, XK.Terminal_3270_PA1}, // ??
            // {Key.OEM_PA1, XK.Terminal_3270_PA1}, //??
            // {Key.OEM_PA2, XK.Terminal_3270_PA2}, //??
            // {Key.OEM_PA3, XK.Terminal_3270_PA3}, //??
            // {Key.OEM_WSCTRL, XK.underscore}, //??
            // {Key.OEM_CUSEL, XK.Terminal_3270_CursorSelect}, //??
            // {Key.OEM_ATTN, XK.Terminal_3270_Attn}, //??
            // {Key.OEM_COPY, XK.Terminal_3270_Copy}, //??
            // {Key.OEM_BACKTAB, XK.Terminal_3270_BackTab}, //??
            // {Key.OEM_FINISH, XK.minus},
            // {Key.OEM_AUTO, XK.Eacute},
            // {Key.OEM_ENLW, XK.percent},
            // {Key.ZOOM, XK.comma},
            // {Key.NONAME, XK.kana_e},
            // {Key.OEM_CLEAR, XK.Clear},
        };

        public static XK VKToXK(Makros.Key key)
        {
            return Dict.LeftToRight[key];
        }
        public static Makros.Key XKToVK(XK key)
        {
            return Dict.RightToLeft[key];
        }
    }
}